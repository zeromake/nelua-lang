local fs = @record{}

local fs.constants = @record{}
local fs.constants.F_OK: integer = 0
local fs.constants.R_OK: integer = 2
local fs.constants.W_OK: integer = 4
local fs.constants.X_OK: integer = 8

local fs.Stats = @record{
    dev: uinteger,
    ino: uinteger,
    mode: uinteger,
    nlink: integer,
    uid: integer,
    gid: integer,
    rdev: integer,
    blksize: integer,
    blocks: integer,
    size: int64,
    ctime: int64,
    mtime: int64,
    atime: int64,
    birthtime: int64
}

local fs.Dirent = @record{
    name: string,
    path: string,
    size: int64,
    ctime: int64,
    mtime: int64,
    atime: int64
}

## if ccinfo.is_windows then
local function access(path: cstring, mode: cint): cint <cimport'_access',cinclude'<io.h>'> end
## else
local function access(path: cstring, mode: cint): cint <cimport,cinclude'<unistd.h>'> end
## end


local function geterrno(): (string, integer)
  local errno: cint <cimport,cinclude'<errno.h>'>
  local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>'> end
  return strerror(errno), errno
end

function fs.access(path: string, mode: facultative(integer)): (boolean, string, integer)
## if mode.type.is_niltype then
    local mode = fs.constants.F_OK
## end
    if access(path, mode) == 0 then
        return true, '', 0
    end
    return false, geterrno()
end

function fs.exists(path: string): boolean
    local ok = fs.access(path)
    return ok
end

function fs.stat(path: string): (*fs.Stats, string, integer)
    return nilptr, '', -1
end

function fs.lstat(path: string): (*fs.Stats, string, integer)
    return nilptr, '', -1
end

return fs
