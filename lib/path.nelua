local strchar: type = require 'detail.strchar'
require 'string'
require 'math'

global path = @record{
    _path: string,
    _prefixLength: isize, -- \\?\ 的前缀略过
}

## if ccinfo.is_windows then
global path.preferred_separator: byte <comptime> = '\\'_b
## else
global path.preferred_separator: byte <comptime> = '/'_b
## end
global path.generic_separator: byte <comptime> = '/'_b


function path:root_name_length(): isize
    if #self._path >= self._prefixLength + 2 then
## if ccinfo.is_windows then
        local first = strchar.toupper(self._path[self._prefixLength])
        if first >= 'A'_b and first <= 'Z'_b and self._path[self._prefixLength + 1] == ':'_b then
            return 2
        end
## else
        local first = self._path[self._prefixLength]
        local second = self._path[self._prefixLength + 1]
        if first == path.preferred_separator and second ~= path.preferred_separator then
            local pos = string.find(self._path, string.char(path.preferred_separator), 4)
            if pos == 0 then
                return #self._path
            else
                return pos - 1
            end
        end
## end
    end
    return 0
end

function path:has_root_name()
    return self:root_name_length() > 0
end

function path:has_root_directory()
    local rootLen: isize = self._prefixLength + self:root_name_length()
    return #self._path > rootLen and self._path[rootLen+1] == path.preferred_separator
end

function path:is_absolute()
## if ccinfo.is_windows then
    return self:has_root_name() and self:has_root_directory()
## else
    return self:has_root_directory()
## end
end

function path:is_relative()
    return not self:is_absolute()
end

function path:root_name()
    local start = self._prefixLength
    return (@path){string.subview(self._path, start, start + self:root_name_length())};
end

function path:__tostring(): string <polymorphic>
    return self._path
end

function path:relative_path()
    local rootPathLen = self._prefixLength + self:root_name_length() + (self:has_root_directory() and 1 or 0);
    return (@path){string.subview(self._path, math.min(rootPathLen, #self._path))};
end

function path:postprocess_path()
    local sb: stringbuilder
    local prev: byte = 0
    for _, b in ipairs(self._path) do
## if ccinfo.is_windows then
        if b == path.generic_separator then
            b = path.preferred_separator
        end
## end
        if b == path.preferred_separator and prev == path.preferred_separator then
            continue
        end
        sb:writebyte(b)
        prev = b
    end
    self._path = sb:promote()
## if ccinfo.is_windows then
    if self:is_absolute() and #self._path >= 256 and not self._path:startswith("\\\\?\\") then
        self._path = "\\\\?\\" .. self._path;
        self._prefixLength = 4
    end
## end
end

function path.create(p: string)
    local s = (@path){
        _path = p,
        _prefixLength = 0,
    }
    s:postprocess_path()
    return s
end

function path.__convert(value: string)
    return path.create(value)
end

return path
