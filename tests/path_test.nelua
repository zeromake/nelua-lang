local path = require 'path'
require 'nester'

nester.describe("path", function()
    nester.it("basename", function()
        expect.equal(path.basename("path.nelua"), "path.nelua")
        expect.equal(path.basename("path.nelua", false), "path")
        expect.equal(path.basename(".nelua", false), "")
        expect.equal(path.basename("nelua", false), "nelua")
        expect.equal(path.basename("file.js.old", false), "file.js")
        expect.equal(path.basename(""), "")
        expect.equal(path.basename("/dir/basename.ext"), "basename.ext")
        expect.equal(path.basename("/basename.ext"), "basename.ext")
        expect.equal(path.basename("basename.ext"), "basename.ext")
        expect.equal(path.basename("basename.ext/"), "basename.ext")
        expect.equal(path.basename("basename.ext//"), "basename.ext")
    end)
    nester.it("win32.basename", function()
        expect.equal(path.win32.basename("\\dir\\basename.ext"), "basename.ext")
        expect.equal(path.win32.basename("\\basename.ext"), "basename.ext")
        expect.equal(path.win32.basename("basename.ext"), "basename.ext")
        expect.equal(path.win32.basename("basename.ext\\\\"), "basename.ext")
        expect.equal(path.win32.basename("foo"), "foo")
        expect.equal(path.win32.basename("aaa\\bbb"), "bbb")
        expect.equal(path.win32.basename("aaa\\bbb\\\\\\\\"), "bbb")
        expect.equal(path.win32.basename("C:"), "")
        expect.equal(path.win32.basename("C:."), ".")
        expect.equal(path.win32.basename("C:\\"), "")
        expect.equal(path.win32.basename("C:\\dir\\base.ext"), "base.ext")
        expect.equal(path.win32.basename("C:\\basename.ext"), "basename.ext")
        expect.equal(path.win32.basename("C:basename.ext"), "basename.ext")
        expect.equal(path.win32.basename("C:basename.ext\\"), "basename.ext")
        expect.equal(path.win32.basename("C:basename.ext\\\\"), "basename.ext")
        expect.equal(path.win32.basename("C:foo"), "foo")
        expect.equal(path.win32.basename("file:stream"), "file:stream")
    end)
    nester.it("posix.basename", function()
        expect.equal(path.posix.basename("\\dir\\basename.ext"), "\\dir\\basename.ext")
        expect.equal(path.posix.basename("\\basename.ext"), "\\basename.ext")
        expect.equal(path.posix.basename("basename.ext"), "basename.ext")
        expect.equal(path.posix.basename("basename.ext\\"), "basename.ext\\")
        expect.equal(path.posix.basename("basename.ext\\\\"), "basename.ext\\\\")
        expect.equal(path.posix.basename("foo"), "foo")
        local controlCharFilename = "Icon"..string.char(13)
        expect.equal(path.posix.basename("/a/b/"..controlCharFilename), controlCharFilename)
    end)
    nester.it("posix.dirname", function()
        expect.equal(path.posix.dirname("/a/b/"), "/a")
        expect.equal(path.posix.dirname("/a/b"), "/a")
        expect.equal(path.posix.dirname("/a"), "/")
        expect.equal(path.posix.dirname(""), ".")
        expect.equal(path.posix.dirname("/"), "/")
        expect.equal(path.posix.dirname("////"), "/")
        expect.equal(path.posix.dirname("//a"), "//")
        expect.equal(path.posix.dirname("foo"), ".")
    end)
    nester.it("win32.dirname", function()
        expect.equal(path.win32.dirname("c:\\"), "c:\\")
        expect.equal(path.win32.dirname("c:\\foo"), "c:\\")
        expect.equal(path.win32.dirname("c:\\foo\\"), "c:\\")
        expect.equal(path.win32.dirname("c:\\foo\\bar"), "c:\\foo")
        expect.equal(path.win32.dirname("c:\\foo\\bar\\"), "c:\\foo")
        expect.equal(path.win32.dirname("c:\\foo\\bar\\baz"), "c:\\foo\\bar")
        expect.equal(path.win32.dirname("c:\\foo bar\\baz"), "c:\\foo bar")
        expect.equal(path.win32.dirname("\\"), "\\")
        expect.equal(path.win32.dirname("\\foo"), "\\")
        expect.equal(path.win32.dirname("\\foo\\"), "\\")
        expect.equal(path.win32.dirname("\\foo\\bar"), "\\foo")
        expect.equal(path.win32.dirname("\\foo\\bar\\"), "\\foo")
        expect.equal(path.win32.dirname("\\foo\\bar\\baz"), "\\foo\\bar")
        expect.equal(path.win32.dirname("\\foo bar\\baz"), "\\foo bar")
        expect.equal(path.win32.dirname("c:"), "c:")
        expect.equal(path.win32.dirname("c:foo"), "c:")
        expect.equal(path.win32.dirname("c:foo\\"), "c:")
        expect.equal(path.win32.dirname("c:foo\\bar"), "c:foo")
        expect.equal(path.win32.dirname("c:foo\\bar\\"), "c:foo")
        expect.equal(path.win32.dirname("c:foo\\bar\\baz"), "c:foo\\bar")
        expect.equal(path.win32.dirname("c:foo bar\\baz"), "c:foo bar")
        expect.equal(path.win32.dirname("file:stream"), ".")
        expect.equal(path.win32.dirname("dir\\file:stream"), "dir")

        expect.equal(path.win32.dirname("\\\\unc\\share"), "\\\\unc\\share")
        expect.equal(path.win32.dirname("\\\\unc\\share\\foo"), "\\\\unc\\share\\")
        expect.equal(path.win32.dirname("\\\\unc\\share\\foo\\"), "\\\\unc\\share\\")
        expect.equal(path.win32.dirname("\\\\unc\\share\\foo\\bar"), "\\\\unc\\share\\foo")
        expect.equal(path.win32.dirname("\\\\unc\\share\\foo\\bar\\"), "\\\\unc\\share\\foo")
        expect.equal(path.win32.dirname("\\\\unc\\share\\foo\\bar\\baz"), "\\\\unc\\share\\foo\\bar")
        expect.equal(path.win32.dirname("/a/b/"), "/a")
        expect.equal(path.win32.dirname("/a/b"), "/a")
        expect.equal(path.win32.dirname("/a"), "/")
        expect.equal(path.win32.dirname(""), ".")
        expect.equal(path.win32.dirname("/"), "/")
        expect.equal(path.win32.dirname("////"), "/")
        expect.equal(path.win32.dirname("foo"), ".")
    end)
    nester.it("extname", function()
        local checks: [][2]string = {
            {'file.nelua', '.nelua'},
            {'', ''},
            {'/path/to/file', ''},
            {'/path/to/file.ext', '.ext'},
            {'/path.to/file.ext', '.ext'},
            {'/path.to/file', ''},
            {'/path.to/.file', '.file'},
            {'/path.to/.file.ext', '.ext'},
            {'/path/to/f.ext', '.ext'},
            {'/path/to/..ext', '.ext'},
            {'/path/to/..', ''},
            {'file', ''},
            {'file.ext', '.ext'},
            {'.file', '.file'},
            {'.file.ext', '.ext'},
            {'/file', ''},
            {'/file.ext', '.ext'},
            {'/.file', '.file'},
            {'/.file.ext', '.ext'},
            {'.path/file.ext', '.ext'},
            {'file.ext.ext', '.ext'},
            {'file.', ''},
            {'.', ''},
            {'./', ''},
            {'.file.ext', '.ext'},
            {'.file', '.file'},
            {'.file.', ''},
            {'.file..', ''},
            {'..', ''},
            {'../', ''},
            {'..file.ext', '.ext'},
            {'..file', '.file'},
            {'..file.', ''},
            {'..file..', ''},
            {'...', ''},
            {'...ext', '.ext'},
            {'....', ''},
            {'file.ext/', '.ext'},
            {'file.ext//', '.ext'},
            {'file/', ''},
            {'file//', ''},
            {'file./', ''},
            {'file.//', ''},
        }
        for i, check in ipairs(checks) do
            local input = check[0]
            local expected = check[1]
            local actual = path.posix.extname(input)
            expect.equal(actual, expected, string.format("index: %d `%s` `%s`", i, check[0], check[1]))
            local actual2 = path.win32.extname(input:gsub("/", "\\"))
            expect.equal(actual2, expected, string.format("index: %d `%s` `%s`", i, check[0], check[1]))
        end
    end)
    nester.it("is_absolute", function()
        expect.equal(path.win32.is_absolute('/'), true)
        expect.equal(path.win32.is_absolute('//'), true)
        expect.equal(path.win32.is_absolute('//server'), true)
        expect.equal(path.win32.is_absolute('//server/file'), true)
        expect.equal(path.win32.is_absolute('\\\\server\\file'), true)
        expect.equal(path.win32.is_absolute('\\\\server'), true)
        expect.equal(path.win32.is_absolute('\\\\'), true)
        expect.equal(path.win32.is_absolute('c'), false)
        expect.equal(path.win32.is_absolute('c:'), false)
        expect.equal(path.win32.is_absolute('c:\\'), true)
        expect.equal(path.win32.is_absolute('c:/'), true)
        expect.equal(path.win32.is_absolute('c://'), true)
        expect.equal(path.win32.is_absolute('C:/Users/'), true)
        expect.equal(path.win32.is_absolute('C:\\Users\\'), true)
        expect.equal(path.win32.is_absolute('C:cwd/another'), false)
        expect.equal(path.win32.is_absolute('C:cwd\\another'), false)
        expect.equal(path.win32.is_absolute('directory/directory'), false)
        expect.equal(path.win32.is_absolute('directory\\directory'), false)

        expect.equal(path.posix.is_absolute('/home/foo'), true)
        expect.equal(path.posix.is_absolute('/home/foo/..'), true)
        expect.equal(path.posix.is_absolute('bar/'), false)
        expect.equal(path.posix.is_absolute('./baz'), false)
    end)

    
end)
